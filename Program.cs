using CsvHelper;
using CsvHelper.Configuration;
using Microsoft.Xrm.Sdk;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ReproChildPropsCSVHelper
{
    class Program
    {
        static string Delegate_ReferenceHeaderPrefix(ReferenceHeaderPrefixArgs args)
        {
            return string.Format("{0}.", args.MemberName);
        }

        static void Main(string[] args)
        {
            List<TestObject> list = new List<TestObject>();
            
            TestObject test1 = new TestObject();

            EntityReference first = new EntityReference();
            first.Id = Guid.NewGuid();
            first.Name = "Name 1";
            first.LogicalName = "Logic Name 1";
            test1.attribute_first = first;

            EntityReference second = new EntityReference();
            second.Id = Guid.NewGuid();
            second.Name = "Name 2";
            second.LogicalName = "Logic Name 2";
            test1.attribute_second = second;

            list.Add(test1);

            string outputPath = "..\\..\\Autogenerated\\Test1.csv";
            using (FileStream fsWrite = File.Open(outputPath, FileMode.Create, FileAccess.Write, FileShare.ReadWrite))
            {
                using (StreamWriter writer = new StreamWriter(fsWrite, Encoding.UTF8))
                {
                    var config = new CsvConfiguration(CultureInfo.InvariantCulture)
                    {
                        ReferenceHeaderPrefix = Delegate_ReferenceHeaderPrefix
                    };

                    using (var csv = new CsvWriter(writer, config))
                    {
                        csv.WriteHeader<TestObject>();
                        csv.NextRecord();
                        foreach (var record in list)
                        {
                            csv.WriteRecord(record);
                            csv.NextRecord();
                        }
                        writer.Flush();
                        Console.WriteLine("Saved {0} records to {1}", typeof(TestObject), outputPath);
                    }
                }
            }

        }
    }
}
